name: release-and-publish

# Controls when the workflow will run
on:
  # Triggers the workflow on push to master i.e when somone merges a pull request on master
  push:
    branches: [ "master" ]
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow has two jobs, 1 creates a new release, the second pushes the release to the CDN
  release:
    name: Release new version
    # Outputs the value of the check if doc release, the next job will not run if this fails
    outputs:
      releaseType: ${{ steps.release.outputs.releaseType}}
      newVersionNumber: ${{ steps.newVersionNumber.outputs.newVersionNumber}}
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Checks what kind of release this is based on the commit message, doc changes does not trigger a new release
      - name: Check release type
        id: release
        run: .github/workflows/scripts/release-and-publish/determineReleaseType.ps1
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RepositoryURI: ${{ github.repository }}
          RepositoryHost: ${{ github.server_url }}

      #Does not run if the merge was a doc change
      - name: Determine new version number
        id: newVersionNumber
        if: steps.release.outputs.releaseType != 'doc'
        run: .github/workflows/scripts/release-and-publish/findNewVersion.ps1
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RepositoryURI: ${{ github.repository }}
          RepositoryHost: ${{ github.server_url }}
          ReleaseType: ${{ steps.release.outputs.releaseType }}

      #Does not run if the merge was a doc change
      - name: Create new tag
        if: steps.release.outputs.releaseType != 'doc'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ steps.newVersionNumber.outputs.newVersionNumber}}" -m "Release v${{ steps.newVersionNumber.outputs.newVersionNumber}}"
          git push origin

      #Does not run if the merge was a doc change
      - name: Create release
        if: steps.release.outputs.releaseType != 'doc'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.newVersionNumber.outputs.newVersionNumber}}
          release_name: 'v${{ steps.newVersionNumber.outputs.newVersionNumber}}'
          body: |
            # New release version: ${{ steps.newVersionNumber.outputs.newVersionNumber}}
            *This is an automated release triggered by the merge of a pull request in the repository: ${{ github.repositoryUrl }}. Please see the Pull request that caused this release for further details.*
  cdn-push:
    name: Push new release to Azure CDN
    # Does not run if the release is a doc release
    needs: [release]
    if: needs.release.outputs.releaseType != 'doc'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CDN_SERVICE_PRINCIPAL_SECRET }}
          service-principal-clientId: ${{ secrets.AZURE_CDN_SERVICE_PRINCIPAL_CLIENTID }}

      - name: Upload release to CDN
        uses: azure/cli@v2
        env:
          azure-subscription-id: ${{ secrets.AZURE_CDN_SUBSCRIPTION_ID }}
          azure-storage-account-name: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
        with:
          inlineScript: |
            az account set --subscription ${{ env.azure-subscription-id }}
            az storage blob upload-batch --destination ${{ env.azure-storage-account-name }}

      - name: Purge CDN cache
        uses: azure/cli@v2
        env:
          azure-subscription-id: ${{ secrets.AZURE_CDN_SUBSCRIPTION_ID }}
          azure-tenant-id: ${{ secrets.AZURE_CDN_TENANT_ID }}